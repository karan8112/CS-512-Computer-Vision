# -*- coding: utf-8 -*-
"""
Created on Tue Nov 27 12:46:37 2018

@author: karan
"""

import numpy as np
import cv2
from as7_function import lucasKanade, draw_vectors, calculate_reliability



def main():
    l =  input("Press h for help function to know how to run the program else press c:")
    if (l == 'h'):
        print("This Program performs Sparse Optical Flow Tracking using Lucas-Kanade Algorithm on selected feature points generated by the Shi-Tomasi Corner Detector.\n Run the as7.py file using python then enter 'c' for run the program. \n Now, the video is displayed with the traced points. \n Use the following keys: \n press e : to exist the program \n press p : to pause and unapuse the video ")
    if (l == 'c'):
        filename = input("Enter the path of the filename:")
        video_capture_frame = cv2.VideoCapture(filename)     
        cv2.namedWindow("Video Sequences",cv2.WINDOW_AUTOSIZE)
        feature_params = dict( maxCorners = 100,
                       qualityLevel = 0.7,
                       minDistance = 15,
                       blockSize = 10 )
        ret, old_frame = video_capture_frame.read()
        gray_old = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
        pts_old = cv2.goodFeaturesToTrack(gray_old, mask = None, **feature_params)
        mask = np.zeros_like(old_frame)    
        while True:
            ret, new_frame = video_capture_frame.read()
            if ret:
                pts_old = [(x,y) for x,y in pts_old[:,0,:]]
                pts_new,A = lucasKanade(new_frame,old_frame,pts_old,7,3)
                pts_new = [(p1[0]+p2[0],p1[1]+p2[1]) for p1,p2 in zip(pts_old,pts_new)]
                #call reliability function
                reliability = calculate_reliability(A)
                mask = draw_vectors(mask,pts_old,pts_new,reliability)
                img = cv2.add(new_frame,mask)
                cv2.imshow("Video Sequences",img)
                k = cv2.waitKey(20)
                #to exist the video
                if k == ord('e'):
                    cv2.destroyAllWindows()
                    break
                #to pause and unpause the video
                if k == ord('p'):
                    l = cv2.waitKey(0)
                    if l == ord('p'):
                        pass
                #to continue the process now ccopy the current new frame as old
                old_frame = new_frame.copy()
                gray_old = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
                pts_old = cv2.goodFeaturesToTrack(gray_old, mask = None, **feature_params)
    

  

if __name__ == "__main__":
    main()